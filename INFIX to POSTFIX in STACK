#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 100
char stack[SIZE];
int top = -1;
void push(char);
char pop();
char peek();
int isOperator(char);
int getPrecedence(char);
void push(char c) {
    stack[++top] = c;
}
char pop() {
    if (top == -1) return '\0';
    return stack[top--];
}
char peek() {
    if (top == -1) return '\0';
    return stack[top];
}
int getPrecedence(char op) {
    switch (op) {
        case '^': return 3;
    case '*':
        case '/':
        case '%': return 2;
        case '+':
        case '-': return 1;
        default: return 0;
    }
}
int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '%' || c == '^');
}
int main() {
    char infix[SIZE], postfix[SIZE];
    int i, k = 0;
printf("Enter an infix expression: ");
scanf("%s", infix);
    for (i = 0; infix[i] != '\0'; i++) {
        char symbol = infix[i];
        if (isalnum(symbol)) { // Operand
            postfix[k++] = symbol;
        }
        else if (symbol == '(') {
            push(symbol);
        }
        else if (symbol == ')') {
            while (top != -1 &&peek() != '(')
                postfix[k++] = pop();
pop(); // remove '('
        }
        else if (isOperator(symbol)) {
            while (top != -1 &&getPrecedence(peek()) >= getPrecedence(symbol))
                postfix[k++] = pop();
            push(symbol);
        }
    }
    while (top != -1)
        postfix[k++] = pop();
    postfix[k] = '\0';
printf("Postfix Expression: %s\n", postfix);
    return 0;
}
